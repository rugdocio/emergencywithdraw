{"version":3,"sources":["config/constants/contracts.js","utils/contractHelper.js","utils/addressHelper.js","config/index.js","actions/emergencyWithdraw.js","contexts/web3Context.js","contexts/AddressContext.js","hooks/usePools.js","hooks/useContract.js","config/constants/explorers.js","utils/decimals.js","components/Pool.js","actions/revokeApproval.js","components/Pools.js","components/MasterchefSearch.js","hooks/useWeb3.js","App.js","reportWebVitals.js","index.js"],"names":["contracts","fetcher","getDefaultGasPrice","web3","chainId","toBN","utils","gasPrices","mul","pow","getGasPrice","eth","getContract","abi","address","undefined","Contract","gasPrice","toString","getFetcherContract","fetcherAbi","getAddress","getFetcherAddress","getMasterchefContract","masterchefAddress","masterchefAbi","getTokenContract","tokenAddress","tokenAbi","emergencyWithdraw","pid","a","masterchefContract","methods","send","from","currentProvider","selectedAddress","tx","console","log","notification","open","message","error","errormsg","data","description","Web3Context","createContext","AddressContext","usePools","useContext","useState","pools","setPools","userAddress","useMemo","useFetcher","useEffect","result","rawPools","start","interval","fetchPools","call","filter","pool","want","i","length","push","name","symbol","amount","depFee","decimals","isFallback","fetch","then","explorers","getAddressLink","formatBigNumberToFixed","bigNumber","displayDecimals","formattedString","formatUnits","toFixed","Pool","props","depositFee","onEmergencyWithdraw","onRevoke","decAmount","Item","Meta","avatar","src","title","target","rel","href","type","danger","onClick","revokeApproval","tokenContract","approve","customizeRenderEmpty","style","textAlign","ExperimentOutlined","fontSize","marginBottom","fontWeight","color","Pools","useReducer","x","forceUpdate","item","mc","doEmergencyWithdraw","doRevoke","orientation","renderEmpty","className","size","itemLayout","dataSource","renderItem","Search","Input","MasterchefSearch","onStart","placeholder","allowClear","enterButton","onSearch","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","useWeb3","provider","setProvider","web3info","setWeb3Info","connect","provider_","Web3","getChainId","on","chainId_","networkId","info","App","setMasterchefAddress","setUserAddress","masterchefAddress_","Provider","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c430f35a.chunk.js","sourcesContent":["// list of contracts\n// Fetcher: Helper contract that is essential for a chain to work. It fetches all the pool data and returns it in a single call\nconst contracts = {\n  fetcher: {\n    321: \"0x4fd9016c5ff784709e8CcF0f6E8aDd357803bf91\", // KCC\n    137: \"0x8ef5eB0522F8771286c7012abBFE7cDFC03A6b7d\", // Polygon\n    56: \"0xD19D7a09d444304f9A57f5297a2d6f684E430238\", // BSC\n    250: \"0x4fd9016c5ff784709e8CcF0f6E8aDd357803bf91\", // FTM\n    1285: \"0x4fd9016c5ff784709e8CcF0f6E8aDd357803bf91\", // MOONRIVER\n    4689: \"0x7FA4b073CCf898c97299ac5aCEb5dE8d5Ef2c7f6\", // IOTEX\n    43114: \"0x4fd9016c5ff784709e8CcF0f6E8aDd357803bf91\", // AVAX\n    42220: \"0x17AB272c26D5193f4343609C7352e133EBd720cc\", // CELO\n    1666600000: \"0x3fE5B475da4814b7dBef4776e1b6df9769256B8b\", // HARMONY shard zero\n  },\n};\n\nexport default contracts\n","import fetcherAbi from \"../config/abi/fetcher.json\";\nimport masterchefAbi from \"../config/abi/masterchef.json\";\nimport tokenAbi from \"../config/abi/token.json\";\nimport { getFetcherAddress } from \"./addressHelper\";\n\nexport const getDefaultGasPrice = (web3, chainId) => {\n  const toBN = web3.utils.toBN;\n  const gasPrices = {\n    56: toBN(5).mul(toBN(10).pow(toBN(9))),\n    137: toBN(1).mul(toBN(10).pow(toBN(9))),\n    321: toBN(1).mul(toBN(10).pow(toBN(9))),\n    43114: toBN(225).mul(toBN(10).pow(toBN(9))),\n    250: toBN(100).mul(toBN(10).pow(toBN(9))),\n    1285: toBN(1).mul(toBN(10).pow(toBN(9))),\n    4689: toBN(1000).mul(toBN(10).pow(toBN(9))),\n    42220: toBN(1).mul(toBN(10).pow(toBN(9))),\n    1666600000: toBN(10).mul(toBN(10).pow(toBN(9))),\n  };\n\n  return chainId in gasPrices ? gasPrices[chainId] : 0;\n};\n\nexport const getGasPrice = (web3) => {\n  return web3.eth.getGasPrice();\n};\n\nconst getContract = (abi, address, web3, chainId) => {\n  if (web3 === undefined) {\n    return undefined;\n  }\n  return new web3.eth.Contract(abi, address, {\n    gasPrice: getDefaultGasPrice(web3, chainId).toString(),\n  });\n};\n\nexport const getFetcherContract = (web3, chainId) => {\n  if (web3 === undefined || chainId === undefined) {\n    return undefined;\n  }\n  return getContract(\n    fetcherAbi,\n    getFetcherAddress(chainId, web3),\n    web3,\n    chainId\n  );\n};\n\nexport const getMasterchefContract = (web3, chainId, masterchefAddress) => {\n  if (\n    web3 === undefined ||\n    web3.eth === undefined ||\n    masterchefAddress == null\n  ) {\n    return undefined;\n  }\n  return getContract(masterchefAbi, masterchefAddress, web3, chainId);\n};\nexport const getTokenContract = (web3, chainId, tokenAddress) => {\n  if (\n    web3 === undefined ||\n    web3.eth === undefined ||\n    tokenAddress == null\n  ) {\n    return undefined;\n  }\n  return getContract(tokenAbi, tokenAddress, web3, chainId);\n};\n","import { BSC_CHAIN_ID } from \"../config\";\nimport contracts from \"../config/constants/contracts\";\n\nexport const getAddress = (address, chainId) => {\n  return address[chainId] ? address[chainId] : address[BSC_CHAIN_ID];\n};\n\nexport const getFetcherAddress = (chainId) => {\n  return getAddress(contracts.fetcher, chainId);\n};\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n","export const BSC_CHAIN_ID = 56;\n","import { notification } from \"antd\"\nimport { getDefaultGasPrice, getGasPrice, getMasterchefContract } from \"../utils/contractHelper\"\n\nconst emergencyWithdraw = (web3, chainId, masterchefAddress, pid) => {\n    return async () => {\n        try {\n            let gasPrice = getDefaultGasPrice(web3, chainId);\n            try {\n                gasPrice = await getGasPrice(web3);\n            } catch {}\n            const masterchefContract = getMasterchefContract(web3, chainId, masterchefAddress)\n            const tx = await masterchefContract.methods.emergencyWithdraw(pid).send({\n                from: web3.currentProvider.selectedAddress,\n                gasPrice: gasPrice,\n            })\n            console.log(\"executed \" + tx)\n\n            notification.open({\n                message: 'Transaction Succeeded'\n            })\n            return tx\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Transaction failed',\n                description: errormsg\n\n            })\n        }\n    }\n}\nexport default emergencyWithdraw","// Context to share the masterchef address state between components\n\nimport { createContext } from \"react\";\n\nconst Web3Context = createContext();\n\nexport default Web3Context;\n","// Context to share the masterchef address state between components\n\nimport { createContext } from \"react\";\n\nconst AddressContext = createContext();\n\nexport default AddressContext;\n","import { notification } from \"antd\";\nimport { useContext, useEffect, useState } from \"react\"\nimport AddressContext from \"../contexts/AddressContext\";\nimport Web3Context from \"../contexts/web3Context\";\nimport { useFetcher } from \"./useContract\";\n\nconst usePools = () => {\n  const {web3, } = useContext(Web3Context)\n  const [pools, setPools] = useState()\n  const {masterchefAddress, userAddress} = useContext(AddressContext);\n  const fetcher = useFetcher();\n  useEffect(() => {\n    const fetch = async () => {\n      if (fetcher === undefined || web3 === undefined || masterchefAddress === undefined || userAddress === undefined) {\n        return []\n      }\n      let  result = []  \n      let rawPools = []\n      let start = 0\n      const interval = 10\n      try {\n      do {\n        rawPools = await fetcher.methods.fetchPools(masterchefAddress, userAddress, start, interval).call({gasPrice: \"0\"})\n        // Currently fetcher always returns 10 pools, filter out padding ones\n        rawPools = rawPools.filter(pool => pool.want !== \"0x0000000000000000000000000000000000000000\") \n        for(let i = 0; i < rawPools.length; i++) {\n          const pool = rawPools[i]\n          result.push({\n            \"name\": pool.name, \n            \"symbol\": pool.symbol, \n            \"amount\": pool.amount, \n            \"pid\": start + i, \n            \"want\": pool.want,\n            \"depositFee\": pool.depFee,\n            \"decimals\": pool.decimals,\n            \"isFallback\": pool.isFallback,\n            \"mc\": masterchefAddress})\n        }\n        start += interval\n        \n      } while(rawPools.length >= interval && start <= 200) // Give up after 200 pools\n    }catch(e){\n        notification.open({\n          message: 'Unable to fetch masterchef',\n          description: 'Are you sure the address is correct?'\n        })\n    }\n      return result\n    }\n    fetch().then(pools => {\n      setPools(pools);\n    })\n  }, [masterchefAddress, userAddress, fetcher, web3])\n\n  return pools\n}\n\nexport default usePools","import { useContext, useMemo } from \"react\";\nimport Web3Context from \"../contexts/web3Context\";\nimport {\n  getFetcherContract,\n} from \"../utils/contractHelper\";\n\nexport const useFetcher = () => {\n  const { web3, chainId } = useContext(Web3Context);\n  return useMemo(() => getFetcherContract(web3, chainId), [web3, chainId]);\n};","// Utility methods to get explorer links\n\nexport const explorers = {\n      137: \"https://polygonscan.com\",\n      56: \"https://bscscan.com\",\n      321: \"https://explorer.kcc.io/en\",\n      250: \"https://ftmscan.com\",\n      1285: \"https://blockscout.moonriver.moonbeam.network/\",\n      4689: \"https://v2.iotexscan.io\",\n      43114: \"https://avascan.info/blockchain/c\",\n      42220: \"https://explorer.celo.org\",\n      1666600000: \"https://explorer.harmony.one/\",\n  };\nexport const getAddressLink = (chainId, address) => {\n    return explorers[chainId] + \"/address/\" + address\n}\n","\nimport { formatUnits } from 'ethers/lib/utils' // might be a bit much to import all of ethers for this\n\nexport const formatBigNumberToFixed = (bigNumber, displayDecimals = 18, decimals = 18) => {\n    const formattedString = formatUnits(bigNumber, decimals)\n    return (+formattedString).toFixed(displayDecimals)\n  }","import { Avatar, List, Button, Space } from \"antd\";\nimport { getAddressLink } from \"../config/constants/explorers\";\nimport { formatBigNumberToFixed } from \"../utils/decimals\";\n\n// The pool component is an entry in the pools list that represents a masterchef pool\n// When the emergencyWithdraw button is pressed, the injected \"onEmergencyWithdraw\" method is called.\n//https://cryptologos.cc/logos/binance-usd-busd-logo.svg?v=010\nfunction Pool(props) {\n  const { name, symbol, amount, pid, chainId, want, depositFee, decimals, isFallback, onEmergencyWithdraw, onRevoke } = props; // consider restructuring this\n  let decAmount = formatBigNumberToFixed(amount, decimals, decimals);\n  if (decAmount > 1) {\n    decAmount = formatBigNumberToFixed(amount, 2, decimals);\n  } else if (decAmount > 0.1) {\n    decAmount = formatBigNumberToFixed(amount, 3, decimals);\n  } else if (decAmount > 0.001) {\n    decAmount = formatBigNumberToFixed(amount, 5, decimals);\n  }\n\n  return (\n    <List.Item>\n      <List.Item.Meta\n        avatar={\n          <Avatar src=\"https://rugdoc.io/assets/placeholder.png\" />\n        }\n\n        title={<a target=\"_blank\" rel=\"noreferrer\" href={getAddressLink(chainId, want)}>{name} - PID: {pid} [ {(isFallback ? \"??.??\" : formatBigNumberToFixed(depositFee, 2, 2)) + \"%\"} ]</a>}\n        description={(amount === \"0\" ? \"0\" : decAmount) + \" \" + symbol}\n      />\n\n      <div>\n        {\" \"}\n        <Space>\n          <Button type=\"primary\" danger onClick={onEmergencyWithdraw}>\n            Emergency Withdraw\n          </Button>\n          <Button type=\"primary\" onClick={onRevoke}>\n            Revoke\n          </Button>\n        </Space>\n      </div>\n    </List.Item>\n  );\n}\nexport default Pool;\n","import { notification } from \"antd\"\nimport { getDefaultGasPrice, getGasPrice, getTokenContract } from \"../utils/contractHelper\"\n\nconst revokeApproval = (web3, chainId, tokenAddress, masterchefAddress) => {\n    return async () => {\n        try {\n           \n            let gasPrice = getDefaultGasPrice(web3, chainId);\n            try {\n                gasPrice = await getGasPrice(web3);\n            } catch {}\n            const tokenContract = getTokenContract(web3, chainId, tokenAddress)\n            const tx = await tokenContract.methods.approve(masterchefAddress, 0).send({\n                from: web3.currentProvider.selectedAddress,\n                gasPrice: gasPrice\n            })\n            console.log(\"executed \" + tx)\n\n            notification.open({\n                message: 'Transaction Succeeded'\n            })\n            return tx\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Transaction failed',\n                description: errormsg\n\n            })\n        }\n    }\n}\nexport default revokeApproval","import { List, Divider, ConfigProvider } from \"antd\";\nimport { useContext, useReducer } from \"react\";\nimport emergencyWithdraw from \"../actions/emergencyWithdraw\";\nimport Web3Context from \"../contexts/web3Context\";\nimport usePools from \"../hooks/usePools\";\nimport { ExperimentOutlined } from '@ant-design/icons';\n\nimport Pool from \"./Pool\";\nimport revokeApproval from \"../actions/revokeApproval\";\n\nconst customizeRenderEmpty = () => (\n  <div style={{ textAlign: 'center' }}>\n    <ExperimentOutlined style={{ fontSize: 70, marginBottom:\"40px\" }} />\n    <p style={{fontWeight: \"bold\", fontSize:35, color:\"#7BD0DD\"}}>Enter a masterchef address to get started</p>\n    <p>Make sure that you're connected to the correct network (Supported: BSC, Polygon, Avalanche, Fantom and KCC)</p>\n    <p></p>\n    <p>This is an experimental service, use at your own risk and make sure to double check all contract interactions</p>\n  </div>\n);\n\n\nfunction Pools() {\n  const [, forceUpdate] = useReducer(x => x + 1, 0); // used to refresh ui\n  const pools = usePools();\n  const { web3, chainId } = useContext(Web3Context);\n\n  const onEmergencyWithdraw = async (item) => {\n    const doEmergencyWithdraw = emergencyWithdraw(\n      web3,\n      chainId,\n      item.mc,\n      item.pid\n    );\n    doEmergencyWithdraw().then(() => {\n        forceUpdate()\n    });\n  \n  };\n\n  const onRevoke = async (item) => {\n    const doRevoke = revokeApproval(\n      web3,\n      chainId,\n      item.want,\n      item.mc\n    );\n    doRevoke().then(() => {\n        forceUpdate()\n    });\n  };\n  return (\n    <>\n      <Divider orientation=\"left\">Pools</Divider>\n\n      <ConfigProvider renderEmpty={customizeRenderEmpty}>\n        <List\n          className=\"demo-loadmore-list\"\n          size=\"large\"\n          itemLayout=\"horizontal\"\n          dataSource={pools}\n          renderItem={(item) => (\n            <Pool\n              name={item.name}\n              symbol={item.symbol}\n              amount={item.amount}\n              pid={item.pid}\n              chainId={chainId}\n              want={item.want}\n              depositFee={item.depositFee}\n              decimals={item.decimals}\n              isFallback={item.isFallback}\n              onEmergencyWithdraw={() => onEmergencyWithdraw(item)}\n              onRevoke={() => onRevoke(item)}\n            ></Pool>\n          )}\n        />\n      </ConfigProvider>\n    </>\n  );\n}\nexport default Pools;\n","import { Input } from \"antd\";\n\nconst { Search } = Input;\n\n// Masterchef input component that calls the injected onStart method with the masterchef address as parameter\nfunction MasterchefSearch(props) {\n  const { onStart } = props;\n  return (\n    <Search\n      placeholder=\"Enter Masterchef Address\"\n      allowClear\n      enterButton=\"Start\"\n      size=\"large\"\n      onSearch={onStart}\n    />\n  );\n}\n\nexport default MasterchefSearch;\n","import { useEffect, useState } from \"react\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"5b7ed00b5a864d5797572f8cfcc5052e\", // required, TODO: still needs to be set to our infura_id.\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst useWeb3 = () => {\n  //todo: useWeb3Provider\n  const [provider, setProvider] = useState();\n  const [web3info, setWeb3Info] = useState({\n    web3: undefined,\n    chainId: undefined,\n  });\n  useEffect(() => {\n    const connect = async () => {\n      const provider_ = await web3Modal.connect();\n  \n      setProvider(provider_);\n      const web3 = new Web3(provider_);\n      const chainId = await  web3.eth.getChainId();\n\n      provider_.on(\"chainChanged\", async (chainId_) => {\n        console.log(\"changed\")\n        const networkId = await web3.eth.getChainId();\n        setWeb3Info({web3: web3, chainId: networkId});\n      });\n\n      return { web3, chainId };\n    };\n    connect().then((info) => {\n      setWeb3Info(info);\n    });\n  }, [provider]);\n\n  // const disconnect = async () => {\n  //   // explicitly close when wallet connect is used\n  //   if (provider && provider.close) {\n  //     await provider.close();\n  //   }\n  //   web3Modal.clearCachedProvider();\n\n  //   setProvider(undefined);\n  //   setWeb3Info(undefined);\n  // };\n\n  return web3info;\n};\n\nexport default useWeb3;\n","import \"./App.css\";\n\nimport Pools from \"./components/Pools\";\nimport MasterchefSearch from \"./components/MasterchefSearch\";\nimport { useEffect, useState } from \"react\";\nimport AddressContext from \"./contexts/AddressContext\";\nimport { ZERO_ADDRESS } from \"./utils/addressHelper\";\nimport useWeb3 from \"./hooks/useWeb3\";\nimport Web3Context from \"./contexts/web3Context\";\n\nfunction App() {\n  const {web3, chainId} = useWeb3();\n  const [masterchefAddress, setMasterchefAddress] = useState(undefined);\n  const [userAddress, setUserAddress] = useState(ZERO_ADDRESS);\n  useEffect(() => {\n    if (\n      web3 === undefined ||\n      web3.currentProvider === undefined ||\n      web3.currentProvider.selectedAddress === undefined\n    ) {\n      return;\n    }\n\n    setUserAddress(web3.currentProvider.selectedAddress);\n  }, [web3]);\n\n  const onStart = async (masterchefAddress_) => {\n    setMasterchefAddress(masterchefAddress_);\n  };\n\n  return (\n    <Web3Context.Provider value={{web3, chainId}} >\n      <AddressContext.Provider value={{ masterchefAddress, userAddress }}>\n        <div className=\"App\">\n          <MasterchefSearch onStart={onStart} />\n          <Pools />\n        </div>\n      </AddressContext.Provider>\n    </Web3Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}